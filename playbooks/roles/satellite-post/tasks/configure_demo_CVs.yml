---
# vim: sw=2 ts=2 ai expandtab

- include_role:
    name: satellite-shared
    tasks_from: lookup_org_loc.yml

- include_role:
    name: satellite-shared
    tasks_from: callsatellite.yml
  vars:
    call_name: "get repo id of extras repo"
    call_api: "/katello/api/repositories?organization_id={{ org_id }}"
    call_var: "repo_id"

- set_fact:
    repo_id: "{{ repo_id.json.results | selectattr('name', 'match', '.*7.*Extras.*') | map(attribute='id') | first | default(0) | int }}"

- assert:
    msg: "repod_id should be > 0"
    that:
      - repo_id | int > 0

- include_role:
    name: satellite-shared
    tasks_from: callsatellite.yml
  vars:
    call_name: "get download policy of extras repo"
    call_api: "/katello/api/repositories/{{ repo_id }}"
    call_var: "repo_policy"

- set_fact:
    repo_policy: "{{ repo_policy.json.download_policy }}"

- name: "set download policy to immediate for extras repo"
  when: "repo_policy != 'immediate'"
  uri:
    url: "{{ satellite_url }}/katello/api/repositories/{{ repo_id }}"
    user: "{{ satellite_user }}"
    password: "{{ satellite_pass }}"
    method: PUT
    force_basic_auth: yes
    validate_certs: false
    body_format: json
    body:
      download_policy: immediate
    headers:
      Accept: "application/json,version=2"

- name: ensure satellite can create rpms
  yum:
    name: rpm-devel
    enablerepo: rhel-7-server-rpms

- name: "Create composite and applciation demo products, repos, and views"
  command: "hammer {{ item }}"
  register: hammer_output
  failed_when:
    - "hammer_output.rc > 0"
    - "'has already been taken' not in hammer_output.stderr"
    - "'components is invalid' not in hammer_output.stderr"
  changed_when:
    - "hammer_output.rc == 0"
  with_items:
    - "product create --name Demo --organization-id={{ org_id }}"
    - "repository create --product Demo --name Demo --content-type yum --download-policy immediate --publish-via-http true --organization-id={{ org_id }}"
    - "content-view create --name Demo_App --organization-id={{ org_id }} --repositories Demo --product Demo"
    - "content-view create --name Demo_Comp --organization-id={{ org_id }} --composite"
    - "content-view component add --composite-content-view=Demo_Comp --organization-id={{ org_id }} --component-content-view=Demo_App --latest"
    - "content-view component add --composite-content-view=Demo_Comp --organization-id={{ org_id }} --component-content-view=RHEL7-Server --latest"

- include_role:
    name: satellite-shared
    tasks_from: callsatellite.yml
  vars:
    call_name: "check if demo content views have been published"
    call_api: "/katello/api/organizations/{{ org_id }}/content_views?search=name~Demo_(App|Comp)"
    call_var: "demo_ids"

- set_fact:
    demo_ids: "{{ _ids }}"
  vars:
    _ids: "{{ demo_ids.json.results | selectattr('versions', 'eq', []) | map(attribute='name') | list }}"


- name: "Publish demo content views if needed"
  command: "hammer {{ item.cmd }}"
  register: hammer_output
  when:
    - "item.name in demo_ids"
  with_items:
    - name: Demo_App
      cmd: "content-view publish --organization-id {{ org_id }} --name Demo_App --description 'intial publish'"
    - name: Demo_Comp
      cmd: "content-view publish --organization-id {{ org_id }} --name Demo_Comp --description 'intial publish'"

- name: "Create AK if needed"
  command: "hammer {{ item }}"
  register: hammer_output
  failed_when:
    - "hammer_output.rc > 0"
    - "'has already been taken' not in hammer_output.stderr"
    - "'components is invalid' not in hammer_output.stderr"
  changed_when:
    - "hammer_output.rc == 0"
  with_items:
    - "activation-key create --name Demo --organization-id {{ org_id }} --lifecycle-environment Library --content-view Demo_Comp --unlimited-hosts"

- include_role:
    name: satellite-shared
    tasks_from: callsatellite.yml
  vars:
    call_name: "get Demo product id"
    call_api: "/katello/api/organizations/{{ org_id }}/subscriptions?search=name=Demo"
    call_var: "product_id"

- set_fact:
    product_id: "{{ (product_id.json.results | first).id }}"

- name: "Assign Demo product to Demo activation key"
  command: "hammer {{ item }}"
  register: hammer_output
  failed_when:
    - "hammer_output.rc > 0"
    - "'has already been registered' not in hammer_output.stderr"
  changed_when:
    - "hammer_output.rc == 0"
  with_items:
    - "activation-key add-subscription --name Demo --organization-id {{ org_id }} --quantity 1 --subscription-id {{ product_id }}"

- name: "Create Demo HostGroup"
  command: "hammer {{ item }}"
  register: hammer_output
  failed_when:
    - "hammer_output.rc > 0"
    - "'has already been taken' not in hammer_output.stderr"
  changed_when:
    - "hammer_output.rc == 0"
  with_items:
    - "hostgroup create --query-organization-id {{ org_id }} --name Demo --content-view Demo_Comp --parent RHEL7-Server"
    - "hostgroup set-parameter --hostgroup Demo --name kt_activation_keys --value RHEL7-BASE,Demo"

- name: wait a few seconds for capsules to start sync
  pause:
    seconds: 10
  when: "demo_ids"

- name: Wait for capsule sync tasks to complete
  connection: local
  check_capsules:
  register: capsule_out
  until: "capsule_out.results | map(attribute='active') | map('length') | flatten | sum == 0"
  delay: 60
  retries: 300
